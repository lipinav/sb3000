name: deploy tags to prod env

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-20.04
    steps:
      -
        uses: actions/checkout@v2
      -
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      -
        run: mkdir -p /home/runner/.npm
        continue-on-error: true
      -
        run: node --version
      -
        run: npm i --legacy-peer-deps
      -
        run: npm run build:dev
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      -
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Get tag version
        id: vars
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/v}"
      -
        name: Echo tag name
        run: echo ${{ steps.vars.outputs.tag }}
      -
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          registry: ghcr.io
          context: ./ 
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ghcr.io/lipinav/deploy/app:${{ steps.vars.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            NODE_ENV: production
            CLIENT_ID: ${{ secrets.CLIENT_ID }}
            SECRET: ${{ secrets.SECRET }}
            REDIRECT: ${{ secrets.REDIRECT }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      -
        name: docker run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker pull ghcr.io/lipinav/deploy/app:${{ steps.vars.outputs.tag }}
            docker rm -f sb3000-prod
            docker run -d --name sb3000-prod -p 580:3000 --entrypoint sh ghcr.io/lipinav/deploy/app:${{ steps.vars.outputs.tag }} run prod
